name: StableRelease

on:
  workflow_run:
    workflows: [ReleaseTag]
    types:
      - completed

permissions:
  id-token: write
  pull-requests: write
  contents: write

jobs:
  stable-release:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: sed -En 's/^go[[:space:]]+([[:digit:].]+)$/GO_VERSION=\1/p' go.mod >> $GITHUB_ENV
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin/
            ~/.kubebuilder/bin/k8s
          key: ${{ runner.os }}-go-cache-${{ hashFiles('**/go.sum') }}
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::339104714817:role/Github
          aws-region: us-east-1
      - run: |
          make toolchain
          make release
          make stablerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "stable_version"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/stable_version.zip`, Buffer.from(download.data));
      - run: unzip stable_version.zip

      - name: Create Pull Request
        if: env.APICodeGenUpdate == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: 'chore: Update website for new release',
              owner,
              repo,
              head: 'website-release',
              base: 'main',
              body: [
                'Website updates for the new release',
                'This PR is generated by [APICodeGen](https://github.com/aws/karpenter/actions/workflows/stable-release.yml).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['website']
            });
