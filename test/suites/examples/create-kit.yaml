---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ping-aws-cli
  namespace: karpenter-tests
spec:
  description: |
    Ping AWS to test connectivity
  steps:
  - name: hello-world
    image: amazon/aws-cli:2.7.11
    script: |
      aws sts get-caller-identity

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-kit
  namespace: karpenter-tests
spec:
  description: |
    Create a KIT Guest Cluster in the existing cluster. This installs aws-vpc-cni, approves the KCM request, and creates the Control Plane in the management cluster.
  workspaces:
    - name: config
  params:
  - name: test-cluster-name
    description: Name of KIT guest cluster
  - name: provisioner-name
    description: Name of Provisioner for KIT Guest Cluster resources
    default: "default"
  steps:
  - name: deploy-kit-control-plane
    image: bitnami/kubectl:1.22
    script: |
      #!/usr/bin/env bash
      echo "Deploying KIT Guest Cluster Control Plane"
      cat <<EOF | kubectl apply -f -
      apiVersion: kit.k8s.sh/v1alpha1
      kind: ControlPlane
      metadata:
        name: $(params.test-cluster-name) # Desired Cluster name
        namespace: karpenter-tests
      spec: {}
      EOF

      for i in $(seq 1 20)
      do
        echo "Waiting for Control Plane to become ready"
        for status in $(kubectl get controlplanes $(params.test-cluster-name) -n karpenter-tests -ojson | jq -r '.status.conditions[].status' 2>/dev/null)
        do
          if [[ "${status}" == "True" ]]; then
            echo "Control Plane is ready."
            break 2
          fi
        done
        if [[ $i -eq "60" ]]; then
          echo "Creating Control Plane timed out after 10 minutes. Exiting"
          exit 1
        fi
        sleep 30
      done

      kubectl get secret -n karpenter-tests $(params.test-cluster-name)-kube-admin-config -ojsonpath='{.data.config}' | base64 -d > $(workspaces.config.path)/config
      chmod 600 $(workspaces.config.path)/config

      echo "Installing CNI"
      kubectl --kubeconfig=$(workspaces.config.path)/config apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/release-1.10/config/master/aws-k8s-cni.yaml
  - name: deploy-kit-data-plane
    image: bitnami/kubectl:1.22
    script: |
      #!/usr/bin/env bash
      echo "Deploying KIT Guest Cluster Data Plane"
      echo "Getting subnet and security group tags"
      TAG=$(kubectl get provisioners $(params.provisioner-name) -ojson | jq -r '.spec.provider.subnetSelector["karpenter.sh/discovery"]')
      echo "Setting up data plane"
      cat <<EOF | kubectl apply -f -
      apiVersion: kit.k8s.sh/v1alpha1
      kind: DataPlane
      metadata:
        name: $(params.test-cluster-name)
        namespace: karpenter-tests
      spec:
        clusterName: $(params.test-cluster-name) # Associated Cluster name
        nodeCount: 1
        subnetSelector:
          karpenter.sh/discovery: ${TAG}
        instanceTypes:
          - m5.2xlarge
          - m5a.2xlarge
      EOF
      echo "Getting kube admin config"
      echo "Waiting for the worker nodes to be ready"
      while true; do
          ready_node=$(kubectl --kubeconfig=$(workspaces.config.path)/config get nodes | grep -w Ready | wc -l)
          if [[ "$ready_node" -eq 1 ]]; then break; fi
          sleep 5
      done
      kubectl --kubeconfig=$(workspaces.config.path)/config get nodes
      kubectl --kubeconfig=$(workspaces.config.path)/config certificate approve $(kubectl --kubeconfig=$(workspaces.config.path)/config get csr | grep "Pending" | awk '{print $1}')

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: create-kit
  namespace: karpenter-tests
spec:
  tasks:
  - name: ping-aws-cli
    taskRef:
      name: ping-aws-cli
  - name: create-kit
    taskRef:
      name: create-kit
    runAfter:
      - ping-aws-cli
    params:
    - name: test-cluster-name
      value: "kit-guest-cluster"
    workspaces:
    - name: config
      workspace: ws
  workspaces:
    - name: ws
